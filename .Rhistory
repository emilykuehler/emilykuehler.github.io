game_log_lst[['team1_def']] <- team1_game_logs_def
game_log_lst[['team2_def']] <- team2_game_logs_def
return (game_log_lst)
}
game_log_mil_mia <- get_game_scores_for_clusters('MIL', 'MIA', min_max_norm_off, min_max_norm_def, 6)
simulate_one_series <- function(game_log_lst, off = T) {
if (off==T) {
team1_df <- game_log_lst$team1_off
team2_df <- game_log_lst$team2_off
} else {
team1_df <- game_log_lst$team1_def
team2_df <- game_log_lst$team2_def
}
tm1_wins <- 0
tm2_wins <- 0
while(TRUE) {
tm1_score <- sample(team1_df$pts,1, replace = T)
tm2_score <- sample(team2_df$pts,1, replace = T)
#need to make sure there is not a tie...
#this is a terrible representation of overtime, but
#gonna go with it for now...
while (tm1_score == tm2_score) {
tm1_score <- sample(team1_df$pts,1, replace = T)
tm2_score <- sample(team2_df$pts,1, replace = T)
}
if (tm1_score > tm2_score) {
tm1_wins <- tm1_wins + 1
} else {
tm2_wins <- tm2_wins + 1
}
if (tm1_wins == 4 | tm2_wins == 4) {
break
}
}
return (c(tm1_wins,tm2_wins))
}
get_game_scores_for_clusters <- function(team1_code, team2_code, min_max_norm_off, min_max_norm_def, n,
team_code = team_codes, team_id = team_ids) {
tm1_closest_off <- calc_distances_for_one_team(which(team_code==team1_code), min_max_norm_off, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
tm2_closest_off <- calc_distances_for_one_team(which(team_code==team2_code), min_max_norm_off, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
tm1_closest_def <- calc_distances_for_one_team(which(team_code==team1_code), min_max_norm_def, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
tm2_closest_def <- calc_distances_for_one_team(which(team_code==team2_code), min_max_norm_def, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
team1_game_logs_off <- get_team_game_logs_multiple_teams(team_id = tm1_closest_off$team_id,
season = '2018-19')
print("FINISHED TEAM 1 OFFENSIVE GAME LOGS")
team2_game_logs_off <- get_team_game_logs_multiple_teams(team_id = tm2_closest_off$team_id,
season = '2018-19')
print("FINISHED TEAM 2 OFFENSIVE GAME LOGS")
team1_game_logs_def <- get_team_game_logs_multiple_teams(team_id = tm1_closest_def$team_id,
season = '2018-19')
print("FINISHED TEAM 1 DEFENSIVE GAME LOGS")
team2_game_logs_def <- get_team_game_logs_multiple_teams(team_id = tm2_closest_def$team_id,
season = '2018-19')
print("FINISHED TEAM 2 DEFENSIVE GAME LOGS")
game_log_lst <- list()
game_log_lst[['team1_off']] <- team1_game_logs_off
game_log_lst[['team2_off']] <- team2_game_logs_off
game_log_lst[['team1_def']] <- team1_game_logs_def
game_log_lst[['team2_def']] <- team2_game_logs_def
return (game_log_lst)
}
test_series <- simulate_one_series(game_log_mil_mia)
test_series <- simulate_one_series(game_log_mil_mia)
test_series <- simulate_one_series(game_log_mil_mia)
test_series <- simulate_one_series(game_log_mil_mia)
test_series <- simulate_one_series(game_log_mil_mia)
100 % 5
103 %% 10
full_sim <- function(game_log_lst, num_sims = 25000, off = T) {
tm1_wins <- 0
tm2_wins <- 0
for (i in 1:num_sims) {
one_series_result <- simulate_one_series(game_log_lst = game_log_lst, off = off)
if (one_series_result[1] > one_series_result[2]) {
tm1_wins <- tm1_wins + 1
} else {
tm2_wins <- tm2_wins + 1
}
if (i %% 1000 == 0) {
print("progress at:")
print (i)
}
}
return (c(tm1_wins,tm2_wins))
}
mil_mia_sim <- full_sim(game_log_mil_mia)
mil_mia_sim
mil_mia_off_sim <- full_sim(game_log_mil_mia)
mil_mia_off_sim
19575 / 25000
mil_mia_def_sim <- full_sim(game_log_mil_mia, off = F)
mil_mia_def_sim
17875 + 19575
37450 / 50000
get_game_scores_for_clusters <- function(team1_code, team2_code, min_max_norm_off, min_max_norm_def, n,
team_code = team_codes, team_id = team_ids) {
tm1_closest_off <- calc_distances_for_one_team(which(team_code==team1_code), min_max_norm_off, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
tm2_closest_off <- calc_distances_for_one_team(which(team_code==team2_code), min_max_norm_off, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
tm1_closest_def <- calc_distances_for_one_team(which(team_code==team1_code), min_max_norm_def, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
tm2_closest_def <- calc_distances_for_one_team(which(team_code==team2_code), min_max_norm_def, team_code) %>%
arrange(euc_dist) %>%
top_n(-n)
team1_game_logs_off <- get_team_game_logs_multiple_teams(team_id = tm1_closest_off$team_id,
season = '2018-19')
print("FINISHED TEAM 1 OFFENSIVE GAME LOGS")
team2_game_logs_off <- get_team_game_logs_multiple_teams(team_id = tm2_closest_off$team_id,
season = '2018-19')
print("FINISHED TEAM 2 OFFENSIVE GAME LOGS")
team1_game_logs_def <- get_team_game_logs_multiple_teams(team_id = tm1_closest_def$team_id,
season = '2018-19')
print("FINISHED TEAM 1 DEFENSIVE GAME LOGS")
team2_game_logs_def <- get_team_game_logs_multiple_teams(team_id = tm2_closest_def$team_id,
season = '2018-19')
print("FINISHED TEAM 2 DEFENSIVE GAME LOGS")
game_log_lst <- list()
game_log_lst[['team1_off']] <- team1_game_logs_off
game_log_lst[['team2_off']] <- team2_game_logs_off
game_log_lst[['team1_def']] <- team1_game_logs_def
game_log_lst[['team2_def']] <- team2_game_logs_def
return (game_log_lst)
}
game_log_gsw_okc <- get_game_scores_for_clusters('GSW', 'OKC', min_max_norm_off, min_max_norm_def, 6)
gsw_okc_off_sim <- full_sim(game_log_gsw_okc)
gsw_okc_def_sim <- full_sim(game_log_gsw_okc, off = F)
gsw_okc_off_sim
gsw_okc_def_sim
gsw_okc_off_sim[1]
gsw_okc_def_sim[1]
13746 + 15729
(13746 + 15729) / 50000
mean(game_log_gsw_okc$team1_off$pts)
mean(game_log_gsw_okc$team2_off$pts)
mean(game_log_gsw_okc$team2_off$opp_pts)
mean(game_log_gsw_okc$team1$opp_pts)
mean(game_log_gsw_okc$team1_def$opp_pts)
mean(game_log_gsw_okc$team2_def$opp_pts)
simulate_one_series <- function(game_log_lst, off = T) {
if (off==T) {
team1_df <- game_log_lst$team1_off
team2_df <- game_log_lst$team2_off
} else {
team1_df <- game_log_lst$team1_def
team2_df <- game_log_lst$team2_def
}
tm1_wins <- 0
tm2_wins <- 0
while(TRUE) {
if (off == T) {
tm1_score <- sample(team1_df$pts,1, replace = T)
tm2_score <- sample(team2_df$pts,1, replace = T)
} else {
tm1_score <- sample(team1_df$opp_pts, replace = T)
tm2_score <- sample(team2_df$opp_pts, replace = T)
}
#need to make sure there is not a tie...
#this is a terrible representation of overtime, but
#gonna go with it for now...
while (tm1_score == tm2_score) {
if (off == T) {
tm1_score <- sample(team1_df$pts,1, replace = T)
tm2_score <- sample(team2_df$pts,1, replace = T)
} else {
tm1_score <- sample(team1_df$opp_pts, replace = T)
tm2_score <- sample(team2_df$opp_pts, replace = T)
}
}
if (tm1_score > tm2_score) {
tm1_wins <- tm1_wins + 1
} else {
tm2_wins <- tm2_wins + 1
}
if (tm1_wins == 4 | tm2_wins == 4) {
break
}
}
return (c(tm1_wins,tm2_wins))
}
gsw_okc_off_sim <- full_sim(game_log_gsw_okc)
gsw_okc_def_sim <- full_sim(game_log_gsw_okc, off = F)
warnings()
simulate_one_series <- function(game_log_lst, off = T) {
if (off==T) {
team1_df <- game_log_lst$team1_off
team2_df <- game_log_lst$team2_off
} else {
team1_df <- game_log_lst$team1_def
team2_df <- game_log_lst$team2_def
}
tm1_wins <- 0
tm2_wins <- 0
while(TRUE) {
if (off == T) {
tm1_score <- sample(team1_df$pts,1, replace = T)
tm2_score <- sample(team2_df$pts,1, replace = T)
} else {
tm1_score <- sample(team1_df$opp_pts, 1, replace = T)
tm2_score <- sample(team2_df$opp_pts, 1, replace = T)
}
#need to make sure there is not a tie...
#this is a terrible representation of overtime, but
#gonna go with it for now...
while (tm1_score == tm2_score) {
if (off == T) {
tm1_score <- sample(team1_df$pts,1, replace = T)
tm2_score <- sample(team2_df$pts,1, replace = T)
} else {
tm1_score <- sample(team1_df$opp_pts, 1, replace = T)
tm2_score <- sample(team2_df$opp_pts, 1, replace = T)
}
}
if (tm1_score > tm2_score) {
tm1_wins <- tm1_wins + 1
} else {
tm2_wins <- tm2_wins + 1
}
if (tm1_wins == 4 | tm2_wins == 4) {
break
}
}
return (c(tm1_wins,tm2_wins))
}
gsw_okc_def_sim <- full_sim(game_log_gsw_okc, off = F)
gsw_okc_def_sim
gsw_okc_off_sim
(14727 + 13764) / 50000
?write.csv
View(heat_def_closest)
View(bucks_off_group_game_logs)
head(bucks_off_group_game_logs)
head(bucks_off_closest)
source("functions.R")
source("/functions.R")
source("functions.R")
?source
source("~/Desktop/nba-playoff-model/functions.R")
library(basketballstatsR)
library(tidyverse); library(purrr)
source("~/Desktop/nba-playoff-model/functions.R")
team_stats_df <- build_dataset_for_playoff_model_step1(season = '2018-19')
team_stats_df <- get_record_against_winning_teams(team_stats_df)
min_max_norm_off <- team_stats_df %>%
select(w,l,w_pct,w_pct_winners,fgm,fga,fg_pct,fg3m,fg3a,fg3_pct,ftm,fta,ft_pct,oreb,reb,ast,tov,blka, pfd,
pts, plus_minus, e_off_rating, off_rating, e_net_rating, net_rating, ast_pct, ast_to,
ast_ratio, oreb_pct, reb_pct, tm_tov_pct, efg_pct, ts_pct, e_pace, pace, pie, pts_2nd_chance,
pts_fb, pts_paint, opp_pts_off_tov, fta_rate, pct_fga_2pt, pct_fga_3pt, pct_pts_2pt,
pct_pts_2pt_mr, pct_pts_3pt, pct_pts_fb, pct_pts_ft, pct_pts_paint, pct_ast_2pm, pct_uast_2pm,
pct_ast_3pm, pct_uast_3pm, pct_ast_fgm, pct_uast_fgm, opp_dreb, opp_reb, opp_stl, opp_blk,
opp_pf) %>%
map(~min_max(.)) %>%
as.data.frame()
min_max_norm_def <- team_stats_df %>%
select(w,l,w_pct,w_pct_winners,dreb,reb,stl,blk, pf, e_def_rating, def_rating, e_net_rating, net_rating,
dreb_pct, reb_pct, e_pace, pie, pts_off_tov, opp_pts_paint, opp_pts_2nd_chance, opp_pts_fb,
opp_pts_paint, opp_efg_pct, opp_fta_rate, opp_tov_pct, opp_oreb_pct, pct_pts_off_tov, opp_fgm,
opp_fga, opp_fg_pct, opp_fg3m, opp_fg3a, opp_fg3_pct, opp_ftm, opp_fta, opp_ft_pct, opp_oreb,
opp_reb, opp_ast, opp_tov, opp_blka, opp_pfd, opp_pts, plus_minus_opp) %>%
map(~min_max(.)) %>%
as.data.frame()
team_codes <- c('ATL','BOS','BKN','CHA','CHI','CLE','DAL','DEN','DET','GSW','HOU','IND',
'LAC','LAL','MEM','MIA','MIL','MIN','NOP','NYK','OKC','ORL','PHI','PHX',
'POR','SAC','SAS','TOR','UTA','WAS')
team_ids <- c('1610612737','1610612738','1610612751','1610612766','1610612741','1610612739',
'1610612742','1610612743','1610612765','1610612744','1610612745','1610612754',
'1610612746','1610612747','1610612763','1610612748','1610612749','1610612750',
'1610612740','1610612752','1610612760','1610612753','1610612755','1610612756',
'1610612757','1610612758','1610612759','1610612761','1610612762','1610612764')
team_game_log_df <- read_csv('https://github.com/emilykuehler/nba-playoff-model/blob/master/game_logs_all_teams.csv?raw=TRUE')
View(team_game_log_df)
game_log_lst <- get_game_logs_for_clusters(team1_code = 'MIL', team2_code = 'MIA',
min_max_norm_off, min_max_norm_def, n = 6,
team_game_log_df)
head(game_log_lst$team1_off)
unique(game_log_lst$team1_off)
unique(game_log_lst$team1_off$team_code)
rm(game_log_lst)
game_log_lst_mil_mia <- get_game_logs_for_clusters(team1_code = 'MIL', team2_code = 'MIA',
min_max_norm_off, min_max_norm_def, n = 6,
team_game_log_df)
mil_mia_sim_off <- full_sim(game_log_lst_mil_mia)
mil_mia_sim_def <- full_sim(game_log_lst_mil_mia, off = F)
mil_mia_sim_off
mil_mia_sim_def
(19494 + 14334) / 50000
game_log_lst_bos_ind <- get_game_logs_for_clusters(team1_code = 'BOS', team2_code = 'IND',
min_max_norm_off, min_max_norm_def, n = 6,
team_game_log_df)
bos_ind_sim_off <- full_sim(game_log_lst_mil_mia)
bos_ind_sim_def <- full_sim(game_log_lst_mil_mia, off = F)
bos_ind_sim_off
bos_ind_sim_def
bos_ind_sim_off <- full_sim(game_log_lst_bos_ind)
bos_ind_sim_def <- full_sim(game_log_lst_bos_ind, off = F)
bos_ind_sim_off
bos_ind_sim_def
(16546 + 13518) / 50000
View(game_log_lst_bos_ind)
migs <- 'dog'
cat(migs,'winner')
source("~/Desktop/nba-playoff-model/functions.R")
source("~/Desktop/nba-playoff-model/functions.R")
source("~/Desktop/nba-playoff-model/functions.R")
test_sim <- run_full_sim('MIL', 'MIA', min_max_norm_off, min_max_norm_def, team_game_log_df)
test_sim
test_sim$off_result[1]
(test_sim$off_result[1] + test_sim$def_result[1]) / 25000 * 2
(test_sim$off_result[1] + test_sim$def_result[1]) / (25000 * 2)
source("~/Desktop/nba-playoff-model/functions.R")
source("~/Desktop/nba-playoff-model/functions.R")
test_sim <- run_full_sim('MIL', 'MIA', min_max_norm_off, min_max_norm_def, team_game_log_df)
test_sim <- run_full_sim('GSW', 'OKC', min_max_norm_off, min_max_norm_def, team_game_log_df)
test_sim <- run_full_sim('GSW', 'OKC', min_max_norm_off, min_max_norm_def, team_game_log_df)
test_sim <- run_full_sim('GSW', 'OKC', min_max_norm_off, min_max_norm_def, team_game_log_df)
test_sim <- run_full_sim('GSW', 'OKC', min_max_norm_off, min_max_norm_def, team_game_log_df)
source("~/Desktop/nba-playoff-model/functions.R")
#eastern conf round 1
mil_mia_sim <- run_full_sim('MIL', 'MIA')
source("~/Desktop/nba-playoff-model/functions.R")
#eastern conf round 1
mil_mia_sim <- run_full_sim('MIL', 'MIA', min_max_norm_off, min_max_norm_def)
source("~/Desktop/nba-playoff-model/functions.R")
source("~/Desktop/nba-playoff-model/functions.R")
#eastern conf round 1
mil_mia_sim <- run_full_sim('MIL', 'MIA', min_max_norm_off, min_max_norm_def, team_game_log_df)
#eastern conf round 1
mil_mia_sim <- run_full_sim('MIL', 'MIA', min_max_norm_off, min_max_norm_def, team_game_log_df)
bos_ind_sim <- run_full_sim('BOS', 'IND', min_max_norm_off, min_max_norm_def, team_game_log_df)
source("~/Desktop/nba-playoff-model/functions.R")
source("~/Desktop/nba-playoff-model/functions.R")
phi_det_sim <- run_full_sim('PHI', 'DET', min_max_norm_off, min_max_norm_def, team_game_log_df)
source("~/Desktop/nba-playoff-model/functions.R")
tor_bkn_sim <- run_full_sim('TOR', 'BKN', min_max_norm_off, min_max_norm_def, team_game_log_df)
#western conf round 1
gsw_okc_sim <- run_full_sim('GSW', 'OKC', min_max_norm_off, min_max_norm_def, team_game_log_df)
den_sas_sim <- run_full_sim('DEN', 'SAS', min_max_norm_off, min_max_norm_def, team_game_log_df)
por_lac_sim <- run_full_sim('POR', 'LAC', min_max_norm_off, min_max_norm_def, team_game_log_df)
hou_uta_sim <- run_full_sim('HOU', 'UTA', min_max_norm_off, min_max_norm_def, team_game_log_df)
#eastern conf round 1
set.seed(94110)
mil_mia_sim <- run_full_sim('MIL', 'MIA', min_max_norm_off, min_max_norm_def, team_game_log_df)
bos_ind_sim <- run_full_sim('BOS', 'IND', min_max_norm_off, min_max_norm_def, team_game_log_df)
phi_det_sim <- run_full_sim('PHI', 'DET', min_max_norm_off, min_max_norm_def, team_game_log_df)
tor_bkn_sim <- run_full_sim('TOR', 'BKN', min_max_norm_off, min_max_norm_def, team_game_log_df)
#eastern conf round 2
mil_bos_sim <- run_full_sim('MIL', 'BOS', min_max_norm_off, min_max_norm_def, team_game_log_df)
phi_tor_sim <- run_full_sim('TOR', 'PHI', min_max_norm_off, min_max_norm_def, team_game_log_df)
#eastern conf finals
mil_phi_sim <- run_full_sim('MIL', 'PHI', min_max_norm_off, min_max_norm_def, team_game_log_df)
source("~/Desktop/nba-playoff-model/functions.R")
#western conf round 1 --> thinks spurs and clippers are way better than they actually are
gsw_okc_sim <- run_full_sim('GSW', 'OKC', min_max_norm_off, min_max_norm_def, team_game_log_df)
den_sas_sim <- run_full_sim('DEN', 'SAS', min_max_norm_off, min_max_norm_def, team_game_log_df)
por_lac_sim <- run_full_sim('POR', 'LAC', min_max_norm_off, min_max_norm_def, team_game_log_df)
hou_uta_sim <- run_full_sim('HOU', 'UTA', min_max_norm_off, min_max_norm_def, team_game_log_df)
cor(min_max_norm_off)
cor_max_off <- cor(min_max_norm_off)
View(cor_max_off)
#test model against last season
team_stats_df_last_yr <- build_dataset_for_playoff_model_step1(season = '2017-18')
min_max_norm_off_last_yr <- team_stats_df_last_yr %>%
select(w,l,w_pct,w_pct_winners,fgm,fga,fg_pct,fg3m,fg3a,fg3_pct,ftm,fta,ft_pct,oreb,reb,ast,tov,blka, pfd,
pts, plus_minus, e_off_rating, off_rating, e_net_rating, net_rating, ast_pct, ast_to,
ast_ratio, oreb_pct, reb_pct, tm_tov_pct, efg_pct, ts_pct, e_pace, pace, pie, pts_2nd_chance,
pts_fb, pts_paint, opp_pts_off_tov, fta_rate, pct_fga_2pt, pct_fga_3pt, pct_pts_2pt,
pct_pts_2pt_mr, pct_pts_3pt, pct_pts_fb, pct_pts_ft, pct_pts_paint, pct_ast_2pm, pct_uast_2pm,
pct_ast_3pm, pct_uast_3pm, pct_ast_fgm, pct_uast_fgm, opp_dreb, opp_reb, opp_stl, opp_blk,
opp_pf) %>%
map(~min_max(.)) %>%
as.data.frame()
min_max_norm_def_last_yr <- team_stats_df_last_yr %>%
select(w,l,w_pct,w_pct_winners,dreb,reb,stl,blk, pf, e_def_rating, def_rating, e_net_rating, net_rating,
dreb_pct, reb_pct, e_pace, pie, pts_off_tov, opp_pts_paint, opp_pts_2nd_chance, opp_pts_fb,
opp_pts_paint, opp_efg_pct, opp_fta_rate, opp_tov_pct, opp_oreb_pct, pct_pts_off_tov, opp_fgm,
opp_fga, opp_fg_pct, opp_fg3m, opp_fg3a, opp_fg3_pct, opp_ftm, opp_fta, opp_ft_pct, opp_oreb,
opp_reb, opp_ast, opp_tov, opp_blka, opp_pfd, opp_pts, plus_minus_opp) %>%
map(~min_max(.)) %>%
as.data.frame()
team_stats_df_last_yr <- get_record_against_winning_teams(team_stats_df_last_yr)
min_max_norm_off <- team_stats_df %>%
select(w,l,w_pct,w_pct_winners,fgm,fga,fg_pct,fg3m,fg3a,fg3_pct,ftm,fta,ft_pct,oreb,reb,ast,tov,blka, pfd,
pts, plus_minus, e_off_rating, off_rating, e_net_rating, net_rating, ast_pct, ast_to,
ast_ratio, oreb_pct, reb_pct, tm_tov_pct, efg_pct, ts_pct, e_pace, pace, pie, pts_2nd_chance,
pts_fb, pts_paint, opp_pts_off_tov, fta_rate, pct_fga_2pt, pct_fga_3pt, pct_pts_2pt,
pct_pts_2pt_mr, pct_pts_3pt, pct_pts_fb, pct_pts_ft, pct_pts_paint, pct_ast_2pm, pct_uast_2pm,
pct_ast_3pm, pct_uast_3pm, pct_ast_fgm, pct_uast_fgm, opp_dreb, opp_reb, opp_stl, opp_blk,
opp_pf) %>%
map(~min_max(.)) %>%
as.data.frame()
min_max_norm_def <- team_stats_df %>%
select(w,l,w_pct,w_pct_winners,dreb,reb,stl,blk, pf, e_def_rating, def_rating, e_net_rating, net_rating,
dreb_pct, reb_pct, e_pace, pie, pts_off_tov, opp_pts_paint, opp_pts_2nd_chance, opp_pts_fb,
opp_pts_paint, opp_efg_pct, opp_fta_rate, opp_tov_pct, opp_oreb_pct, pct_pts_off_tov, opp_fgm,
opp_fga, opp_fg_pct, opp_fg3m, opp_fg3a, opp_fg3_pct, opp_ftm, opp_fta, opp_ft_pct, opp_oreb,
opp_reb, opp_ast, opp_tov, opp_blka, opp_pfd, opp_pts, plus_minus_opp) %>%
map(~min_max(.)) %>%
as.data.frame()
min_max_norm_off_last_yr <- team_stats_df_last_yr %>%
select(w,l,w_pct,w_pct_winners,fgm,fga,fg_pct,fg3m,fg3a,fg3_pct,ftm,fta,ft_pct,oreb,reb,ast,tov,blka, pfd,
pts, plus_minus, e_off_rating, off_rating, e_net_rating, net_rating, ast_pct, ast_to,
ast_ratio, oreb_pct, reb_pct, tm_tov_pct, efg_pct, ts_pct, e_pace, pace, pie, pts_2nd_chance,
pts_fb, pts_paint, opp_pts_off_tov, fta_rate, pct_fga_2pt, pct_fga_3pt, pct_pts_2pt,
pct_pts_2pt_mr, pct_pts_3pt, pct_pts_fb, pct_pts_ft, pct_pts_paint, pct_ast_2pm, pct_uast_2pm,
pct_ast_3pm, pct_uast_3pm, pct_ast_fgm, pct_uast_fgm, opp_dreb, opp_reb, opp_stl, opp_blk,
opp_pf) %>%
map(~min_max(.)) %>%
as.data.frame()
min_max_norm_def_last_yr <- team_stats_df_last_yr %>%
select(w,l,w_pct,w_pct_winners,dreb,reb,stl,blk, pf, e_def_rating, def_rating, e_net_rating, net_rating,
dreb_pct, reb_pct, e_pace, pie, pts_off_tov, opp_pts_paint, opp_pts_2nd_chance, opp_pts_fb,
opp_pts_paint, opp_efg_pct, opp_fta_rate, opp_tov_pct, opp_oreb_pct, pct_pts_off_tov, opp_fgm,
opp_fga, opp_fg_pct, opp_fg3m, opp_fg3a, opp_fg3_pct, opp_ftm, opp_fta, opp_ft_pct, opp_oreb,
opp_reb, opp_ast, opp_tov, opp_blka, opp_pfd, opp_pts, plus_minus_opp) %>%
map(~min_max(.)) %>%
as.data.frame()
team_stats_df_last_yr <- get_record_against_winning_teams(team_stats_df_last_yr, season = '2017-18')
setwd('~/Desktop/emilykuehler.github.io')
getwd()
library(tidyverse); library(gganimate)
grand_slams <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-09/grand_slams.csv")
grand_slams_clean <- grand_slams %>%
mutate(tournament_order = case_when(grand_slam=='australian_open' ~ 1,
grand_slam=='french_open' ~ 2,
grand_slam=='wimbledon' ~ 3,
grand_slam=='us_open' ~ 4),
name = ifelse(name == 'Evonne Goolagong Cawley', 'Evonne Goolagong', name)) %>%
arrange(tournament_date)
init_df <- grand_slams_clean %>%
filter(year <= 1975) %>%
group_by(name) %>%
filter(rolling_win_count==max(rolling_win_count)) %>%
ungroup() %>%
top_n(10, wt=rolling_win_count) %>%
arrange(desc(rolling_win_count)) %>%
select(name,gender, rolling_win_count) %>%
mutate(curr_year = 1975,
ordering = as.double(rev(seq(10:1))) * 1.0)
for (i in 1976:2019) {
for (j in 1:4) {
tmp_df <- grand_slams_clean %>%
filter(year < i | (year==i & tournament_order <= j)) %>%
group_by(name) %>%
filter(rolling_win_count==max(rolling_win_count)) %>%
ungroup() %>%
top_n(10, wt=rolling_win_count) %>%
select(name, gender, rolling_win_count) %>%
arrange(desc(rolling_win_count)) %>%
slice(1:10) %>%
mutate(curr_year = i,
tournament_num = j,
ordering = as.double(rev(seq(10:1))) * 1.0)
init_df <- init_df %>%
bind_rows(tmp_df)
}
}
final_df <- init_df %>%
group_by(curr_year, tournament_num) %>%
mutate(num = group_indices()) %>%
ungroup()
my_font <- 'Quicksand'
my_background <- 'antiquewhite'
my_theme <- my_theme <- theme(text = element_text(family = my_font),
rect = element_rect(fill = my_background),
plot.background = element_rect(fill = my_background, color = NA),
panel.background = element_rect(fill = my_background, color = NA),
panel.border = element_blank(),
plot.title = element_text(face = 'bold', size = 20),
plot.subtitle = element_text(size = 14),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = 'grey75'),
panel.grid.minor.x = element_line(color = 'grey75'),
legend.position = 'none',
plot.caption = element_text(size = 8),
axis.ticks = element_blank(),
axis.text.y =  element_blank())
theme_set(theme_light() + my_theme)
barplot_race <- ggplot(aes(ordering, group = name), data = final_df) +
geom_tile(aes(y = rolling_win_count / 2,
height = rolling_win_count,
width = 0.9, fill=gender), alpha = 0.9) +
scale_fill_manual(values = c('#F8AFA8','#74A089')) +
geom_text(aes(y = rolling_win_count, label = name), family=my_font, nudge_y = -2, size = 3) +
geom_text(aes(y = rolling_win_count, label = as.character(rolling_win_count)), family=my_font, nudge_y = 0.5) +
geom_text(aes(x=1,y=18.75, label=paste0(curr_year)), family=my_font, size=8, color = 'gray45') +
coord_cartesian(clip = "off", expand = FALSE) +
coord_flip() +
labs(title = 'Most Grand Slam Singles Championships',
subtitle = 'Open Era Only',
caption = 'data source: Wikipedia | plot by @emilykuehler',
x = '',
y = '') +
transition_states(num,
transition_length = 4, state_length = 3) +
ease_aes('cubic-in-out')
animate(barplot_race, nframes = 800, fps = 30, width = 600, height = 400, res=80, detail = 3)
anim_save("barplot_race.gif")
.6667 * 400
animate(barplot_race, nframes = 800, fps = 30, width = 400, height = 266, res=80, detail = 3)
head(grand_slams)
